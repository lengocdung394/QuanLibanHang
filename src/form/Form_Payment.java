package form;

import com.itextpdf.text.Chunk;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.FontFactory;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.pdf.BaseFont;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;
import connectBD.ConnectDB;
import dao.OrderDetail_DAO;
import dao.Order_DAO;
import dao.Product_DAO;
import entity.OrderDetails;
import entity.Products;

import java.awt.Color;
import java.awt.Desktop;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.sql.SQLException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;


public class Form_Payment extends javax.swing.JPanel {

    private final ArrayList<OrderDetails> list = new ArrayList<>();
    private Order_DAO order_DAO;
    private Product_DAO product_DAO;
    private OrderDetail_DAO orderDetail_DAO;
    private String fileName = "";
    private String ma;

    /**
     * Creates new form Form_Order
     */
    public Form_Payment(String name) {
        try {
            ConnectDB.getInstance().connect();
            order_DAO = new Order_DAO();
            product_DAO = new Product_DAO();
            orderDetail_DAO = new OrderDetail_DAO();

        } catch (SQLException ex) {
            Logger.getLogger(Form_Payment.class.getName()).log(Level.SEVERE, null, ex);
        }
        this.ma = name;
        initComponents();

        changeTotal();

        txtEnterMoney.getDocument()
                .addDocumentListener(new DocumentListener() {
                    @Override
                    public void insertUpdate(DocumentEvent e
                    ) {
                        updateChange();
                    }

                    @Override
                    public void removeUpdate(DocumentEvent e
                    ) {
                        updateChange();
                    }

                    @Override
                    public void changedUpdate(DocumentEvent e
                    ) {
                        updateChange();
                    }

                    private void updateChange() {
                        String moneyStr = txtEnterMoney.getText().trim();
                        if (!moneyStr.isEmpty()) {
                            try {
                                double moneyDouble = Double.parseDouble(moneyStr);
                                double total = Double.parseDouble(txtTongTien.getText().replace(" VND", ""));
                                double change = moneyDouble - total;
                                txtChange.setText(String.valueOf(change));
                            } catch (NumberFormatException ex) {
                                // Handle invalid input
                                txtChange.setText("");
                            }
                        } else {
                            // Clear change if no money entered
                            txtChange.setText("");
                        }
                    }
                }
                );

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pMain = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        scrollPane = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        lblOrderDetail = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtAdd = new javax.swing.JTextField();
        btnAddToOrderDetail = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        lblProductId = new javax.swing.JLabel();
        txtProductId = new javax.swing.JTextField();
        lblProductName = new javax.swing.JLabel();
        lblQuantity = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        lblUnitPrice = new javax.swing.JLabel();
        txtUnitPrice = new javax.swing.JTextField();
        btnRepair = new javax.swing.JButton();
        lblRemoveTable = new javax.swing.JButton();
        lblDiscount = new javax.swing.JLabel();
        txtDiscount = new javax.swing.JTextField();
        lblThanhTien = new javax.swing.JLabel();
        txtThanhTien = new javax.swing.JTextField();
        txtProductName = new javax.swing.JTextField();
        pOrderDetail = new swing.PannelBorder();
        txtOrderID = new javax.swing.JTextField();
        lblOrderDate = new javax.swing.JLabel();
        txtOrderDate = new javax.swing.JTextField();
        lblOrder = new javax.swing.JLabel();
        lblOrderId = new javax.swing.JLabel();
        txtEmployeeId = new javax.swing.JTextField();
        lblTotal = new javax.swing.JLabel();
        lblEmployeeId = new javax.swing.JLabel();
        txtTotal = new javax.swing.JTextField();
        lblVAT = new javax.swing.JLabel();
        lblPaymentMethod = new javax.swing.JLabel();
        cboPaymentMethod = new javax.swing.JComboBox<>();
        lblEnterMoney = new javax.swing.JLabel();
        txtEnterMoney = new javax.swing.JTextField();
        btnPrintOrder = new javax.swing.JButton();
        lblChange = new javax.swing.JLabel();
        txtChange = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtTongTien = new javax.swing.JTextField();
        txtVAT = new javax.swing.JTextField();

        setBackground(new java.awt.Color(255, 255, 255));
        setPreferredSize(new java.awt.Dimension(1000, 571));

        pMain.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setForeground(Color.decode("#1d976c"));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Mã sản phẩm", "Tên sản phẩm", "Số lượng", "Đơn giá", "Giảm giá", "Thành tiền"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.setMaximumSize(new java.awt.Dimension(2147483647, 2147483647));
        table.setMinimumSize(new java.awt.Dimension(0, 0));
        table.setPreferredSize(new java.awt.Dimension(375, 600));
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        scrollPane.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setResizable(false);
            table.getColumnModel().getColumn(1).setResizable(false);
            table.getColumnModel().getColumn(2).setResizable(false);
            table.getColumnModel().getColumn(3).setResizable(false);
            table.getColumnModel().getColumn(4).setResizable(false);
            table.getColumnModel().getColumn(5).setPreferredWidth(150);
        }

        lblOrderDetail.setBackground(new java.awt.Color(255, 255, 255));
        lblOrderDetail.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblOrderDetail.setForeground(Color.decode("#1d976c"));
        lblOrderDetail.setText("Chi Tiết Hóa Đơn");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setForeground(Color.decode("#1d976c"));
        jLabel2.setText("Nhập mã sản phẩm:");

        txtAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAddActionPerformed(evt);
            }
        });

        btnAddToOrderDetail.setText("Thêm");
        btnAddToOrderDetail.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddToOrderDetailActionPerformed(evt);
            }
        });

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Thông tin sản phẩm", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Segoe UI", 1, 14), Color.decode("#1d976c"))); // NOI18N

        lblProductId.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblProductId.setForeground(Color.decode("#1d976c"));
        lblProductId.setText("Mã sản phẩm:");

        txtProductId.setEditable(false);
        txtProductId.setEnabled(false);
        txtProductId.setPreferredSize(new java.awt.Dimension(90, 30));

        lblProductName.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblProductName.setForeground(Color.decode("#1d976c"));
        lblProductName.setText("Tên sản phẩm:");

        lblQuantity.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblQuantity.setForeground(Color.decode("#1d976c"));
        lblQuantity.setText("Số lượng:");

        txtQuantity.setPreferredSize(new java.awt.Dimension(90, 30));

        lblUnitPrice.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblUnitPrice.setForeground(Color.decode("#1d976c"));
        lblUnitPrice.setText("Đơn giá:");

        txtUnitPrice.setEditable(false);
        txtUnitPrice.setEnabled(false);
        txtUnitPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUnitPriceActionPerformed(evt);
            }
        });

        btnRepair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/repair.png"))); // NOI18N
        btnRepair.setText("Chỉnh sửa");
        btnRepair.setPreferredSize(new java.awt.Dimension(90, 30));
        btnRepair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRepairActionPerformed(evt);
            }
        });

        lblRemoveTable.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icon/reset.png"))); // NOI18N
        lblRemoveTable.setText("Làm mới");
        lblRemoveTable.setPreferredSize(new java.awt.Dimension(90, 30));
        lblRemoveTable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lblRemoveTableActionPerformed(evt);
            }
        });

        lblDiscount.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblDiscount.setForeground(Color.decode("#1d976c"));
        lblDiscount.setText("Giảm giá:");

        txtDiscount.setEnabled(false);
        txtDiscount.setVerifyInputWhenFocusTarget(false);

        lblThanhTien.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblThanhTien.setForeground(Color.decode("#1d976c"));
        lblThanhTien.setText("Thành tiền:");

        txtThanhTien.setEnabled(false);

        txtProductName.setEditable(false);
        txtProductName.setEnabled(false);
        txtProductName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtProductNameActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(38, 38, 38)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(lblUnitPrice)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(lblProductId)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 35, Short.MAX_VALUE)
                        .addComponent(txtProductId, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(lblQuantity)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(lblDiscount)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(lblThanhTien)
                                .addGap(50, 50, 50)))
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtDiscount, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(txtThanhTien)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(lblProductName)
                        .addGap(31, 31, 31)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtUnitPrice, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                            .addComponent(txtProductName))))
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnRepair, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblRemoveTable, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(52, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProductId)
                            .addComponent(txtProductId, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblProductName)
                            .addComponent(txtProductName, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                        .addComponent(lblRemoveTable, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtUnitPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblUnitPrice))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(7, 7, 7)
                        .addComponent(btnRepair, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblQuantity))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblDiscount, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(10, 10, 10)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblThanhTien)
                            .addComponent(txtThanhTien, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 615, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(152, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(221, 221, 221)
                            .addComponent(lblOrderDetail))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(28, 28, 28)
                            .addComponent(jLabel2)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(txtAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(btnAddToOrderDetail)))
                    .addContainerGap(327, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(87, Short.MAX_VALUE)
                .addComponent(scrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 224, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(5, 5, 5)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(40, 40, 40))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(lblOrderDetail)
                    .addGap(9, 9, 9)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel2)
                        .addComponent(txtAdd, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnAddToOrderDetail))
                    .addContainerGap(517, Short.MAX_VALUE)))
        );

        javax.swing.GroupLayout pMainLayout = new javax.swing.GroupLayout(pMain);
        pMain.setLayout(pMainLayout);
        pMainLayout.setHorizontalGroup(
            pMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pMainLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        pMainLayout.setVerticalGroup(
            pMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pMainLayout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        txtOrderID.setEnabled(false);

        lblOrderDate.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblOrderDate.setForeground(new java.awt.Color(255, 255, 255));
        lblOrderDate.setText("Ngày lập:");

        txtOrderDate.setText((java.time.LocalDate.now() + ""));
        txtOrderDate.setToolTipText("");
        txtOrderDate.setAutoscrolls(false);
        txtOrderDate.setEnabled(false);
        txtOrderDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtOrderDateActionPerformed(evt);
            }
        });

        lblOrder.setFont(new java.awt.Font("Segoe UI", 1, 24)); // NOI18N
        lblOrder.setForeground(new java.awt.Color(255, 255, 255));
        lblOrder.setText("Hóa Đơn");

        lblOrderId.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblOrderId.setForeground(new java.awt.Color(255, 255, 255));
        lblOrderId.setText("Mã hóa đơn:");

        txtEmployeeId.setEnabled(false);
        txtEmployeeId.setPreferredSize(new java.awt.Dimension(85, 22));

        lblTotal.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblTotal.setForeground(new java.awt.Color(255, 255, 255));
        lblTotal.setText("Tổng cộng:");

        lblEmployeeId.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblEmployeeId.setForeground(new java.awt.Color(255, 255, 255));
        lblEmployeeId.setText("Mã nhân viên:");

        txtTotal.setEnabled(false);
        txtTotal.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtTotalFocusLost(evt);
            }
        });
        txtTotal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTotalActionPerformed(evt);
            }
        });

        lblVAT.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblVAT.setForeground(new java.awt.Color(255, 255, 255));
        lblVAT.setText("VAT(%):");

        lblPaymentMethod.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblPaymentMethod.setForeground(new java.awt.Color(255, 255, 255));
        lblPaymentMethod.setText("Phương thức thanh toán:");

        cboPaymentMethod.setForeground(new java.awt.Color(242, 242, 242));
        cboPaymentMethod.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tiền mặt", "E-banking", "Ví điện tử" }));
        cboPaymentMethod.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboPaymentMethodActionPerformed(evt);
            }
        });

        lblEnterMoney.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblEnterMoney.setForeground(new java.awt.Color(255, 255, 255));
        lblEnterMoney.setText("Nhập số tiền:");

        txtEnterMoney.setToolTipText("Nhập số tiền");
        txtEnterMoney.setVerifyInputWhenFocusTarget(false);

        btnPrintOrder.setBackground(new java.awt.Color(255, 51, 51));
        btnPrintOrder.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnPrintOrder.setForeground(new java.awt.Color(255, 255, 255));
        btnPrintOrder.setText("In Hóa Đơn");
        btnPrintOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintOrderActionPerformed(evt);
            }
        });

        lblChange.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        lblChange.setForeground(new java.awt.Color(255, 255, 255));
        lblChange.setText("Tiền thừa:");

        txtChange.setEditable(false);
        txtChange.setEnabled(false);
        txtChange.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtChangeFocusLost(evt);
            }
        });
        txtChange.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtChangeActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Tổng tiền:");

        txtTongTien.setEnabled(false);
        txtTongTien.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTongTienActionPerformed(evt);
            }
        });

        txtVAT.setEnabled(false);
        txtVAT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtVATActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pOrderDetailLayout = new javax.swing.GroupLayout(pOrderDetail);
        pOrderDetail.setLayout(pOrderDetailLayout);
        pOrderDetailLayout.setHorizontalGroup(
            pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pOrderDetailLayout.createSequentialGroup()
                .addGroup(pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pOrderDetailLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lblPaymentMethod)
                        .addGap(18, 18, 18)
                        .addComponent(cboPaymentMethod, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(pOrderDetailLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lblEnterMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblChange))
                        .addGap(18, 18, 18)
                        .addGroup(pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtEnterMoney)
                            .addComponent(txtChange, javax.swing.GroupLayout.DEFAULT_SIZE, 230, Short.MAX_VALUE)))
                    .addGroup(pOrderDetailLayout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(btnPrintOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(pOrderDetailLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pOrderDetailLayout.createSequentialGroup()
                                .addComponent(lblEmployeeId)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtEmployeeId, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pOrderDetailLayout.createSequentialGroup()
                                .addComponent(lblOrderDate)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pOrderDetailLayout.createSequentialGroup()
                                .addComponent(lblOrderId)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pOrderDetailLayout.createSequentialGroup()
                                .addComponent(lblTotal)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                                .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pOrderDetailLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(pOrderDetailLayout.createSequentialGroup()
                                .addComponent(lblVAT)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(txtVAT, javax.swing.GroupLayout.PREFERRED_SIZE, 230, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pOrderDetailLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(lblOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(107, 107, 107))
        );
        pOrderDetailLayout.setVerticalGroup(
            pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pOrderDetailLayout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(lblOrder)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrderId)
                    .addComponent(txtOrderID, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblOrderDate)
                    .addComponent(txtOrderDate, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEmployeeId)
                    .addComponent(txtEmployeeId, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTotal)
                    .addComponent(txtTotal, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblVAT)
                    .addComponent(txtVAT, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtTongTien, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblPaymentMethod)
                    .addComponent(cboPaymentMethod, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblEnterMoney)
                    .addComponent(txtEnterMoney, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20)
                .addGroup(pOrderDetailLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtChange, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblChange))
                .addGap(20, 20, 20)
                .addComponent(btnPrintOrder, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(pMain, javax.swing.GroupLayout.PREFERRED_SIZE, 622, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pOrderDetail, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(pOrderDetail, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void cboPaymentMethodActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboPaymentMethodActionPerformed
        // TODO add your handling code here:
        String select = cboPaymentMethod.getSelectedItem().toString();
        if (select.equalsIgnoreCase("Tiền mặt")) {
            txtEnterMoney.setEnabled(true);
        } else {
            txtEnterMoney.setEnabled(false);
            txtEnterMoney.setText("");
            txtChange.setText("");
        }
    }//GEN-LAST:event_cboPaymentMethodActionPerformed

    private void btnPrintOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintOrderActionPerformed

        String orderId = "";

        String money = txtEnterMoney.getText().trim();
        double total = Double.parseDouble(txtTongTien.getText().replace(" VND", ""));
        Document document = new Document();
        Font unicodeFont = FontFactory.getFont("Arial Unicode MS", BaseFont.IDENTITY_H, BaseFont.EMBEDDED);
        if (cboPaymentMethod.getSelectedItem().toString().equalsIgnoreCase("Tiền mặt")) {
            if (money.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Vui lòng nhập số tiền");
                return;
            } else {
                try {
                    double moneyDouble = Double.parseDouble(money);

                    if (moneyDouble >= total) {
                        String dateStr = txtOrderDate.getText(); // Lấy dữ liệu từ ô txtOrderDate

                        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
                        LocalDate orderDate = LocalDate.parse(dateStr, formatter); // Chuyển đổi thành LocalDate
                        // ma nhan vien 
                        String empID = ma;

                        order_DAO.createOrder(empID, orderDate, total, txtVAT.getText().equals("10%") ? 0.1 : 0);
                        orderId = order_DAO.getTop1OrderID();
                        try {
                            // Tạo tên file PDF
                            fileName = "HoaDon//BrezzeStore_" + orderId + ".pdf";

                            // Tạo một đối tượng PdfWriter để viết dữ liệu vào file PDF
                            PdfWriter.getInstance(document, new FileOutputStream(fileName));

                            // Mở document để bắt đầu viết dữ liệu
                            document.open();

                            // Thêm thông tin cửa hàng Circle K
                            Font fontTitle = new Font(Font.FontFamily.HELVETICA, 24, Font.BOLD);
                            Paragraph title = new Paragraph("BreezeStore", fontTitle);
                            title.setAlignment(Element.ALIGN_CENTER);
                            document.add(title);

                            Font fontAddress = new Font(Font.FontFamily.HELVETICA, 14, Font.ITALIC);
                            Paragraph address = new Paragraph("12 Nguyen Van Bao, Phuong 4, Quan Go Vap, Thanh pho Ho Chi Minh, Viet Nam", fontAddress);
                            address.setAlignment(Element.ALIGN_CENTER);
                            document.add(address);

                            // Thêm thông tin hóa đơn
                            Paragraph orderInfo = new Paragraph();
                            orderInfo.setFont(unicodeFont);
                            orderInfo.add(new Chunk("\nOrder ID: " + orderId + "\n\n"));
                            orderInfo.add(new Chunk("Date: " + txtOrderDate.getText() + "\n\n"));
                            orderInfo.add(new Chunk("Employee ID: " + empID + "\n\n"));
                            orderInfo.add(new Chunk("Payment Method: " + cboPaymentMethod.getSelectedItem().toString() + "\n\n", unicodeFont));
                            document.add(orderInfo);

                            // Thêm danh sách các mặt hàng đã mua
                            PdfPTable table = new PdfPTable(5); // 5 cột: Mã SP, Tên SP, Số lượng, Đơn giá, Thành tiền
                            table.setWidthPercentage(100);
                            table.addCell(new PdfPCell(new Phrase("Product ID", unicodeFont)));
                            table.addCell(new PdfPCell(new Phrase("Product Name", unicodeFont)));
                            table.addCell(new PdfPCell(new Phrase("Quantity", unicodeFont)));
                            table.addCell(new PdfPCell(new Phrase("Unit Price", unicodeFont)));
                            table.addCell(new PdfPCell(new Phrase("Subtotal", unicodeFont)));

                            // Thêm thông tin các mặt hàng vào bảng
                            for (OrderDetails o : list) {
                                table.addCell(new PdfPCell(new Paragraph(o.getMaSP().getMaSP(), unicodeFont)));
                                table.addCell(new PdfPCell(new Paragraph(o.getMaSP().getTenSP(), unicodeFont)));
                                table.addCell(new PdfPCell(new Paragraph(String.valueOf(o.getSoLuong()), unicodeFont)));
                                table.addCell(new PdfPCell(new Paragraph(String.valueOf(o.getMaSP().getDonGiaBan()), unicodeFont)));
                                table.addCell(new PdfPCell(new Paragraph(String.valueOf(o.tinhTien()), unicodeFont)));

                            }

                            // Thêm bảng vào document
                            document.add(table);

                            // Thêm tổng tiền
                            Paragraph totalParagraph = new Paragraph();
                            totalParagraph.setFont(unicodeFont);
                            totalParagraph.add(new Chunk("\nTotal (+VAT): " + txtTotal.getText() + "\n\n", unicodeFont));
                            totalParagraph.setAlignment(Element.ALIGN_RIGHT);
                            document.add(totalParagraph);

                            // Thêm thông tin thanh toán
                            Paragraph cashParagraph = new Paragraph();
                            cashParagraph.add(new Chunk("Cash: " + moneyDouble + " VND\n\n", unicodeFont));
                            cashParagraph.add(new Chunk("Change: " + (moneyDouble - total) + " VND", unicodeFont));
                            cashParagraph.setAlignment(Element.ALIGN_RIGHT);
                            document.add(cashParagraph);

                            // Đóng document sau khi thêm dữ liệu
                            document.close();

                        } catch (DocumentException | FileNotFoundException e) {
                            e.printStackTrace();
                        }

                        // Cập nhật số lượng sản phẩm và chi tiết đơn hàng
                        for (OrderDetails orderDetails : list) {
                            String maSP = orderDetails.getMaSP().getMaSP();
                            int slTon = product_DAO.getQuantityByID(maSP);
                            product_DAO.updateProductQuantity(maSP, slTon - orderDetails.getSoLuong());
                            orderDetail_DAO.createOrderDetail(orderId, maSP, orderDetails.getSoLuong());
                        }
                    } else {
                        JOptionPane.showMessageDialog(this, "Số tiền không đủ");
                        return;
                    }
                } catch (NumberFormatException ex) {
                    JOptionPane.showMessageDialog(this, "Số tiền không hợp lệ");
                }
            }
        } else {
            String dateStr = txtOrderDate.getText(); // Lấy dữ liệu từ ô txtOrderDate

            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd");
            LocalDate orderDate = LocalDate.parse(dateStr, formatter); // Chuyển đổi thành LocalDate
            String empID = ma;

            order_DAO.createOrder(empID, orderDate, total, txtVAT.getText().equals("10%") ? 0.1 : 0);
            orderId = order_DAO.getTop1OrderID();
            try {
                // Tạo tên file PDF
                fileName = "HoaDon//BrezzeStore_" + orderId + ".pdf";

                // Tạo một đối tượng PdfWriter để viết dữ liệu vào file PDF
                PdfWriter.getInstance(document, new FileOutputStream(fileName));

                // Mở document để bắt đầu viết dữ liệu
                document.open();

                // Thêm thông tin cửa hàng Circle K
                Font fontTitle = new Font(Font.FontFamily.HELVETICA, 24, Font.BOLD);
                Paragraph title = new Paragraph("BreezeStore", fontTitle);
                title.setAlignment(Element.ALIGN_CENTER);
                document.add(title);

                Font fontAddress = new Font(Font.FontFamily.HELVETICA, 14, Font.ITALIC);
                Paragraph address = new Paragraph("12 Nguyen Van Bao, Phuong 4, Quan Go Vap, Thanh pho Ho Chi Minh, Viet Nam", fontAddress);
                address.setAlignment(Element.ALIGN_CENTER);
                document.add(address);

                // Thêm thông tin hóa đơn
                Paragraph orderInfo = new Paragraph();
                orderInfo.setFont(unicodeFont);
                orderInfo.add(new Chunk("\nOrder ID: " + orderId + "\n\n"));
                orderInfo.add(new Chunk("Date: " + txtOrderDate.getText() + "\n\n"));
                orderInfo.add(new Chunk("Employee ID: " + empID + "\n\n"));
                orderInfo.add(new Chunk("Payment Method: " + cboPaymentMethod.getSelectedItem().toString() + "\n\n", unicodeFont));
                document.add(orderInfo);

                // Thêm danh sách các mặt hàng đã mua
                PdfPTable table = new PdfPTable(5); // 5 cột: Mã SP, Tên SP, Số lượng, Đơn giá, Thành tiền
                table.setWidthPercentage(100);
                table.addCell(new PdfPCell(new Phrase("Product ID", unicodeFont)));
                table.addCell(new PdfPCell(new Phrase("Product Name", unicodeFont)));
                table.addCell(new PdfPCell(new Phrase("Quantity", unicodeFont)));
                table.addCell(new PdfPCell(new Phrase("Unit Price", unicodeFont)));
                table.addCell(new PdfPCell(new Phrase("Subtotal", unicodeFont)));

                // Thêm thông tin các mặt hàng vào bảng
                for (OrderDetails o : list) {
                    table.addCell(new PdfPCell(new Paragraph(o.getMaSP().getMaSP(), unicodeFont)));
                    table.addCell(new PdfPCell(new Paragraph(o.getMaSP().getTenSP(), unicodeFont)));
                    table.addCell(new PdfPCell(new Paragraph(String.valueOf(o.getSoLuong()), unicodeFont)));
                    table.addCell(new PdfPCell(new Paragraph(String.valueOf(o.getMaSP().getDonGiaBan()), unicodeFont)));
                    table.addCell(new PdfPCell(new Paragraph(String.valueOf(o.tinhTien()), unicodeFont)));

                }

                // Thêm bảng vào document
                document.add(table);

                // Thêm tổng tiền
                Paragraph totalParagraph = new Paragraph();
                totalParagraph.setFont(unicodeFont);
                totalParagraph.add(new Chunk("\nTotal (+VAT): " + txtTotal.getText() + "\n\n", unicodeFont));
                totalParagraph.setAlignment(Element.ALIGN_RIGHT);
                document.add(totalParagraph);

                // Đóng document sau khi thêm dữ liệu
                document.close();

            } catch (DocumentException | FileNotFoundException e) {
                e.printStackTrace();
            }

            // Cập nhật số lượng sản phẩm và chi tiết đơn hàng
            for (OrderDetails orderDetails : list) {
                String maSP = orderDetails.getMaSP().getMaSP();
                int slTon = product_DAO.getQuantityByID(maSP);
                product_DAO.updateProductQuantity(maSP, slTon - orderDetails.getSoLuong());
                orderDetail_DAO.createOrderDetail(orderId, maSP, orderDetails.getSoLuong());
            }
        }

        if (!fileName.equalsIgnoreCase("")) {

            File file = new File(fileName);
            if (file.exists()) {
                try {
                    Desktop.getDesktop().open(file);
                } catch (IOException ex) {
                    ex.printStackTrace();
                }
            }
            reset();
        }
        list.clear();

    }//GEN-LAST:event_btnPrintOrderActionPerformed

    private void txtVATActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtVATActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtVATActionPerformed

    private void txtChangeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtChangeActionPerformed

    }//GEN-LAST:event_txtChangeActionPerformed

    private void txtTotalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTotalActionPerformed


    }//GEN-LAST:event_txtTotalActionPerformed

    private void txtTotalFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtTotalFocusLost

    }//GEN-LAST:event_txtTotalFocusLost

    private void txtChangeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtChangeFocusLost

    }//GEN-LAST:event_txtChangeFocusLost

    private void txtAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAddActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAddActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        int row = table.getSelectedRow();
        if (row >= 0) {
            txtProductId.setText(table.getValueAt(row, 0).toString());
            txtProductName.setText(table.getValueAt(row, 1).toString());
            txtUnitPrice.setText(table.getValueAt(row, 3).toString());
            txtQuantity.setText(table.getValueAt(row, 2).toString());
            txtDiscount.setText(table.getValueAt(row, 4).toString());
            txtThanhTien.setText(table.getValueAt(row, 5).toString());

        }
    }//GEN-LAST:event_tableMouseClicked

    private void lblRemoveTableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lblRemoveTableActionPerformed
        if (JOptionPane.showConfirmDialog(this, "Bạn có muốn xóa toàn bộ dữ liệu trong bảng không", "Cảnh báo", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            reset();
        }
    }//GEN-LAST:event_lblRemoveTableActionPerformed

    private void btnRepairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRepairActionPerformed
        int row = table.getSelectedRow();
        try {
            if (row < 0) {
                JOptionPane.showMessageDialog(this, "Chọn dòng cần sửa số lượng");
            } else {

                String maSp = table.getValueAt(row, 0).toString();
                int slTon = product_DAO.getQuantityByID(maSp);
                int slHienTai = Integer.parseInt(table.getValueAt(row, 2).toString());

                int slCanSua = 0;
                try {
                    slCanSua = Integer.parseInt(txtQuantity.getText());
                    if (slCanSua < 1) {
                        JOptionPane.showMessageDialog(this, "Số lượng phải lớn hơn 0");
                        return;

                    }
                    if (slTon < slCanSua) {
                        JOptionPane.showMessageDialog(this, "Số lượng mặt hàng không đủ");
                        return;
                    }
                } catch (NumberFormatException exception) {
                    JOptionPane.showMessageDialog(this, "Số lượng nhập phải là số");
                    return;

                }
                table.setValueAt(slCanSua, row, 2);
                table.setValueAt(slCanSua * Double.parseDouble(table.getValueAt(row, 3).toString()), row, 5);
                int sl = slCanSua - slHienTai;
                for (OrderDetails orderDetails : list) {
                    if (orderDetails.getMaSP().getMaSP().equalsIgnoreCase(maSp)) {
                        orderDetails.setSoLuong(slCanSua);

                    }
                }

            }

        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Dữ liệu trong bảng hóa đơn rỗng");
        }

    }//GEN-LAST:event_btnRepairActionPerformed

    private void txtUnitPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUnitPriceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUnitPriceActionPerformed

    private void txtOrderDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtOrderDateActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtOrderDateActionPerformed

    private void txtProductNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtProductNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtProductNameActionPerformed

    private void txtTongTienActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTongTienActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtTongTienActionPerformed

    private void btnAddToOrderDetailActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddToOrderDetailActionPerformed

        String empID = ma;
        String maSP = txtAdd.getText();
        Products p = product_DAO.getTableAddToOrderDetail(maSP);
       
        if (p == null) {
            JOptionPane.showMessageDialog(this, "Mã sản phẩm không tồn tại");
        } else {
            int slTon = product_DAO.getQuantityByID(p.getMaSP());
            if (slTon <= 0) {
                JOptionPane.showMessageDialog(this, "Sản phẩm đã hết hàng");
            } else {
                boolean isProductExist = false;
                for (int i = 0; i < table.getRowCount(); i++) {
                    if (table.getValueAt(i, 0).equals(p.getMaSP())) {
                        int sl = (int) table.getValueAt(i, 2) + 1;
                        table.setValueAt(sl, i, 2);
                        double donGia = (double) table.getValueAt(i, 3);
                        double giamGia = (double) table.getValueAt(i, 4);
                        double thanhTien = sl * donGia - sl * donGia * giamGia;
                        table.setValueAt(thanhTien, i, 5);
                        isProductExist = true;

                        // Cập nhật thông tin sản phẩm trong danh sách đơn hàng
                        OrderDetails existingOrder = list.get(i);
                        existingOrder.setSoLuong(sl);

                        break;
                    }
                }
                if (!isProductExist) {
                    int sl = 1;

                    double thanhTien = sl * p.getDonGiaBan() - sl * p.getDonGiaBan() * p.getGiamGia();
                    ((DefaultTableModel) table.getModel()).addRow(new Object[]{
                        p.getMaSP(), p.getTenSP(), sl, p.getDonGiaBan(), p.getGiamGia(), thanhTien
                    });

                    // Thêm sản phẩm mới vào danh sách đơn hàng
                    OrderDetails newOrder = new OrderDetails(p, sl);
                    list.add(newOrder);
                }
            }
        }


    }//GEN-LAST:event_btnAddToOrderDetailActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddToOrderDetail;
    private javax.swing.JButton btnPrintOrder;
    private javax.swing.JButton btnRepair;
    private javax.swing.JComboBox<String> cboPaymentMethod;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel lblChange;
    private javax.swing.JLabel lblDiscount;
    private javax.swing.JLabel lblEmployeeId;
    private javax.swing.JLabel lblEnterMoney;
    private javax.swing.JLabel lblOrder;
    private javax.swing.JLabel lblOrderDate;
    private javax.swing.JLabel lblOrderDetail;
    private javax.swing.JLabel lblOrderId;
    private javax.swing.JLabel lblPaymentMethod;
    private javax.swing.JLabel lblProductId;
    private javax.swing.JLabel lblProductName;
    private javax.swing.JLabel lblQuantity;
    private javax.swing.JButton lblRemoveTable;
    private javax.swing.JLabel lblThanhTien;
    private javax.swing.JLabel lblTotal;
    private javax.swing.JLabel lblUnitPrice;
    private javax.swing.JLabel lblVAT;
    private javax.swing.JPanel pMain;
    private swing.PannelBorder pOrderDetail;
    private javax.swing.JScrollPane scrollPane;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtAdd;
    private javax.swing.JTextField txtChange;
    private javax.swing.JTextField txtDiscount;
    private javax.swing.JTextField txtEmployeeId;
    private javax.swing.JTextField txtEnterMoney;
    private javax.swing.JTextField txtOrderDate;
    private javax.swing.JTextField txtOrderID;
    private javax.swing.JTextField txtProductId;
    private javax.swing.JTextField txtProductName;
    private javax.swing.JTextField txtQuantity;
    private javax.swing.JTextField txtThanhTien;
    private javax.swing.JTextField txtTongTien;
    private javax.swing.JTextField txtTotal;
    private javax.swing.JTextField txtUnitPrice;
    private javax.swing.JTextField txtVAT;
    // End of variables declaration//GEN-END:variables

    private void reset() {
        ((DefaultTableModel) table.getModel()).setRowCount(0);
        txtProductId.setText("");
        txtProductName.setText("");
        txtUnitPrice.setText("");
        txtQuantity.setText("");
        txtTotal.setText("");
        txtVAT.setText("");
        txtChange.setText("");
        txtEnterMoney.setText("");
        cboPaymentMethod.setSelectedIndex(0);
        txtDiscount.setText("");
        txtThanhTien.setText("");
        txtTongTien.setText("");
        txtAdd.setText("");
    }

    private void changeTotal() {
        table.getModel().addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {

                double total = 0;
                for (int i = 0; i < table.getRowCount(); i++) {
                    double tt = Double.parseDouble(table.getValueAt(i, 3).toString()) * Integer.parseInt(table.getValueAt(i, 2).toString());

                    total += tt;
                    if (total > 1000000) {
                        txtVAT.setText("10%");
                        txtTongTien.setText(total + total * 0.1 + " VND");
                    } else {
                        txtVAT.setText("0");
                        txtTongTien.setText(total + " VND");
                    }
                }
                txtTotal.setText(total + " VND");

            }
        });
    }

}
